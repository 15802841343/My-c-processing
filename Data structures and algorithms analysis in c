//最大子序列
int MaxSequence(int a[],int len){
    int max = a[0],this_max = 0;
    for (int  i =0; i<len; i++) {
        this_max += a[i];
        if (this_max > max) {
            max = this_max;
        }
    }
    return max;
}


//最小正子序列
int MinPositiveSequence(int a[],int len){
    int min,this_min = 0;
    min = MaxSequence(a, len);
    for (int  i =0; i<len; i++) {
        this_min += a[i];
        if (this_min<min && this_min>0) {
            min = this_min;
        }
    }
    return min;
}


//最大子序列乘积
int MaxSequenceMultipication(int *a,int len){
    int max,this_max;
    max = a[0];
    this_max = 1;
    for (int i = 0; i<len; i++) {
        this_max *= a[i];
        if (this_max > max) {
            max = this_max;
        }
    }
    return max;
}

//可能主元素查找
#include <stdio.h>
#include <stdlib.h>

int main(){
    int *A = malloc(sizeof(int)*20);
    int *B = malloc(sizeof(int)*20);
    int countA = 0,countB = 0;
    while (scanf("%d",A+countA)) {
        countA++;
    }
    //现在有countA个元素
    for (int  i = 0; i<countA; i++) {
        printf("%d",A[i]);
    }
    putchar('\n');
    int i;
    for (i = 0; i<countA-1; i+=2) {
        if (A[i] == A[i+1]) {
            B[countB++] = A[i];
        }
    }
    if (countA%2 != 0) {
        B[countB++] = A[countA-1];
    }
    for (int  i = 0; i<countB; i++) {
        printf("%d",B[i]);
    }
    putchar('\n');
    
    while (countB>2) {
        for (int  i = 0; i<countB; i++) {
            A[i] = B[i];
        }
        countA = countB;// 不能把b的指针直接给a的指针，这样 会发生内存泄漏！！！
        countB = 0;
        
        for (int  i = 0; i<countA; i++) {
            printf("%d",A[i]);
        }
        putchar('\n');
        int i;
        for (i = 0; i<countA-1; i+=2) {
            if (A[i] == A[i+1]) {
                B[countB++] = A[i];
            }
        }
        if (countA%2 != 0) {
            B[countB++] = A[countA-1];
        }
        for (int  i = 0; i<countB; i++) {
            printf("%d",B[i]);
        }
        putchar('\n');
    }
